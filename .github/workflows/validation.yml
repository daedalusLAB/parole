name: Test PAROLE pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-parole:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']

    steps:
      - name: üîÑ Checkout repository
        uses: actions/checkout@v4

      - name: üß∞ Add Apache Arrow APT repo + install system deps
        shell: bash
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends ca-certificates lsb-release wget
          wget https://packages.apache.org/artifactory/arrow/$(lsb_release -is | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release -cs).deb
          sudo apt-get install -y ./apache-arrow-apt-source-latest-$(lsb_release -cs).deb
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            ffmpeg \
            libasound2-dev \
            libgtk2.0-dev \
            r-base \
            curl \
            build-essential \
            libarrow-dev

      - name: üîÑ Checkout
  uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: üì¶ Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: üì¶ Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install pyarrow pandas        # Para la validaci√≥n
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: ü¶ú Set up R
        uses: r-lib/actions/setup-r@v2

      - name: üì¶ Install R package 'arrow'
        run: |
          Rscript -e "install.packages('arrow', repos='https://cloud.r-project.org')"

      - name: ‚öôÔ∏è Install PAROLE (no prompts)
        run: |
          yes y | bash install_parole.sh

      - name: üß™ Run test video through PAROLE
        run: |
          chmod +x scripts/parole.sh
          ./scripts/parole.sh \
            data/videos/2016-01-01_0000_US_KNBC_The_Ellen_DeGeneres_Show_91.07-95.45_today.mp4 \
            resultados/ --parquet

      - name: ‚úÖ Verify output file exists
        run: |
          test -f "resultados/2016-01-01_0000_US_KNBC_The_Ellen_DeGeneres_Show_91.07-95.45_today/2016-01-01_0000_US_KNBC_The_Ellen_DeGeneres_Show_91.07-95.45_today_prosody.parquet"

      - name: üîç Validate Parquet content (rows >0, alg√∫n valor ‚â† NA)
        run: |
          python - <<'PY'
          import pathlib, pyarrow.parquet as pq, sys
          p = pathlib.Path("resultados") / "2016-01-01_0000_US_KNBC_The_Ellen_DeGeneres_Show_91.07-95.45_today" / "2016-01-01_0000_US_KNBC_The_Ellen_DeGeneres_Show_91.07-95.45_today_prosody.parquet"
          tbl = pq.read_table(p)
          if tbl.num_rows == 0:
              sys.exit("Parquet vac√≠o")
          if all(col.null_count == tbl.num_rows for col in tbl.itercolumns()):
              sys.exit("Todas las columnas son NA")
          print(f"‚úî Parquet v√°lido: {tbl.num_rows} filas, {tbl.num_columns} columnas")
          PY

      - name: üì§ Upload resultados directory as artifact
        uses: actions/upload-artifact@v4
        with:
          name: parole-output-${{ matrix.python-version }}
          path: resultados/
          if-no-files-found: error

      - name: üö¶ Add job summary
        run: |
          echo "‚úÖ PAROLE pipeline completed and validated on Python ${{ matrix.python-version }}." >> $GITHUB_STEP_SUMMARY
