name: Test PAROLE pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-parole:
    runs-on: ubuntu-latest          # arrow se compila vía R; no necesitamos libarrow-dev
    timeout-minutes: 45

    steps:
      # 1) Obtener el código
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      # 2) Dependencias de sistema (sin libarrow-dev)
      - name: 🧰 System deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            ffmpeg libasound2-dev libgtk2.0-dev r-base curl \
            build-essential cmake libssl-dev libcurl4-openssl-dev libxml2-dev
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: requirements_python.txt

      # 4) Instalar dependencias Python (pyarrow para la validación final)
      - name: 📦 Install Python deps
        run: |
          pip install --upgrade pip
          pip install pyarrow pandas
          pip install -r requirements_python.txt

      # 5) Instalar PAROLE (compila arrow en R dentro del script)
      - name: ⚙️ Install PAROLE (no prompts)
        run: |
          yes y | bash install_parole.sh

      # 6) Ejecutar un vídeo de prueba por la pipeline
      - name: 🧪 Run test video through PAROLE
        run: |
          chmod +x scripts/parole.sh
          ./scripts/parole.sh \
            data/videos/2016-01-01_0000_US_KNBC_The_Ellen_DeGeneres_Show_91.07-95.45_today.mp4 \
            resultados/ --parquet

      # 7) Verificar que el Parquet no esté vacío ni lleno de NA
      - name: 🔍 Validate Parquet content
        run: |
          python - <<'PY'
          import pathlib, sys, pyarrow.parquet as pq
          # Ajusta aquí si cambiaste nombres/ruta
          p = pathlib.Path("resultados") / \
              "2016-01-01_0000_US_KNBC_The_Ellen_DeGeneres_Show_91.07-95.45_today" / \
              "2016-01-01_0000_US_KNBC_The_Ellen_DeGeneres_Show_91.07-95.45_today_prosody.parquet"

          if not p.exists():
              sys.exit(f"Parquet no encontrado: {p}")

          tbl = pq.read_table(p)
          if tbl.num_rows == 0:
              sys.exit("Parquet vacío (0 filas)")

          if all(col.null_count == tbl.num_rows for col in tbl.itercolumns()):
              sys.exit("Todas las columnas son NA")

          print(f"✔ Parquet válido: {tbl.num_rows} filas, {tbl.num_columns} columnas")
          PY
